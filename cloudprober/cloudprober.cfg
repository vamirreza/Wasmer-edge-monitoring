{{ define "IPDic" }}

  {{ $ipVersion := .ipver }}
  {{ $allIPs := .AllIPS }}
  {{ $allDomains := .domains }}

  {{ with $checkTypesTargets := .checkTypes }}
    {{ range $_, $checkType := $checkTypesTargets }}

      {{ with $ipTargets := $allIPs }}
        {{ range $_, $ip := $ipTargets }}

          {{ if eq $checkType "PING" }}
            probe {
              name: "{{$checkType}}_{{$ipVersion}}_{{$ip}}"
              type: {{$checkType}}
              ip_version: {{$ipVersion}}
              targets {
                host_names: "{{$ip}}"
              }
            }
          {{ else if ne $checkType "PING" }}

            {{ with $domainTargets := $allDomains }}
              {{ range $_, $domain := $domainTargets }}

                {{ if eq $checkType "HTTP" }}
                  {{ with $httpCheckTypesTarget := mkSlice "HTTP" "HTTPS" }}
                    {{ range $_, $httpCheckType := $httpCheckTypesTarget }}

                      probe {
                        name: "{{$httpCheckType}}_{{$ip}}_{{$domain}}"
                        type: {{$checkType}}
                        ip_version: {{$ipVersion}}
                        http_probe {
                          protocol: {{$httpCheckType}}
                          headers: {
                            name: "Host"
                            value: "{{$domain}}"
                          }
                          {{ if eq $httpCheckType  "HTTPS" }}
                            tls_config {
                              server_name: "{{$domain}}"
                            }
                          {{ end }}
                        }
                        targets {
                          host_names: "{{$ip}}"
                        }
                        validator {
                          name: "status_code_2xx"
                          http_validator {
                            success_status_codes: "200-299"
                          }
                        }
                        validator {
                          name: "HTML_re"
                          regex: "<[^>]+>"
                        }
                      }

                    {{ end }}
                  {{ end }}
                {{ else if eq $checkType "DNS" }}
                  {{ with $dnsCheckTypesTarget := mkSlice "A" "AAAA" }}
                    {{ range $_, $dnsCheckType := $dnsCheckTypesTarget }}

                      probe {
                        name: "{{$checkType}}_{{$dnsCheckType}}_{{$ip}}_{{$domain}}"
                        type: {{$checkType}}
                        ip_version: {{$ipVersion}}
                        dns_probe {
                          resolved_domain: "{{$domain}}"
                          query_type: {{$dnsCheckType}}
                          min_answers: 2
                        }
                        targets {
                          host_names: "{{$ip}}"
                        }
                      }

                    {{ end }}
                  {{ end }}
                {{ end }}

              {{ end }}
            {{ end }}

          {{ end }}

        {{ end }}
      {{ end }}

    {{ end }}
  {{ end }}

{{ end }}

{{ $domains :=  mkSlice "wasix.org" "docs.wasmer.io" "wasmer-docs.wasmer.app" "wasmer.sh" }}
{{ $checkTypes := mkSlice "PING" "HTTP" "DNS" }}
{{ $ipv4 := mkSlice "51.161.198.52" "178.249.213.111" "88.99.240.24" "88.99.141.253" "5.161.90.11" "5.161.213.176" "5.161.212.179" "5.161.113.199" "5.161.216.132" "5.78.97.58" "5.78.72.41" }}
{{ $ipv6 := mkSlice "2a01:4ff:1f0:d1a9::1" "2a01:4ff:1f0:8a73::1" "2a01:4ff:f0:c963::1" "2a01:4ff:f0:a1d8::1" "2a01:4ff:f0:d424::1" "2a01:4ff:f0:41c4::1" "2a01:4ff:f0:8ce2::1" "2a01:4f8:10a:2606::2" "2a01:4f8:10b:6f::2" }}

{{ template "IPDic" mkMap "ipver" "IPV4" "domains" $domains "checkTypes" $checkTypes "AllIPS" $ipv4 }}
{{ template "IPDic" mkMap "ipver" "IPV6" "domains" $domains "checkTypes" $checkTypes "AllIPS" $ipv6 }}


surfacer {
  type: PROMETHEUS

  prometheus_surfacer {
    metrics_prefix: "cloudprober_"
  }
}
